<p class="h3">Define a model</p>

<div class="code">
<pre>
tetra.model.register(name, Object)
</pre>
</div>

<p class="description">
    <b>name</b> The name of the model. It must be the same as the name of the file.<br>
</p>
<p class="description">
    <b>Object</b> This object configures the model, describing models attributes, validation methods and routes.
</p>

<p class="subtitle">Model description</p>

<div class="code">
<pre>
{
   req : {},
   attr : {},
   methods : {}
}
</pre>
</div>

<p class="subtitle">Parameters</p>

<p class="description">
    <b>req</b> describes URLs and verbs for accessing server-side endpoints.
</p>
<p class="description">
    <b>attr</b> (mandatory) Object listing all attributes of instances of the model class, including their default value.
</p>
<p class="description">
    <b>methods</b> Contains custom functions
</p>

<p class="subtitle">req parameter</p>

<div class="code">
<pre>
{
    save : {
        params: {
             action: 'addInterest'
        }
    },
    fetch : {
        url: '/path/to/{0}/{1}',
        uriParams: ['test', 'var'],
        method: 'POST',
        params: {
            action: 'getInterest'
        },
        parser: function(resp, col, cond) {
            return col;
        }
    },
    del : {
        params: {
            action: 'deleteInterest'
        }
    }
}
</pre>
</div>

<p class="description">
    This attribute is not mandatory if you use default settings.<br>
    There's simple call types for each actions :
</p>

<p class="description">
    <b>save</b> settings used when calling save()
</p>
<p class="description">
    <b>fetch</b> settings used when calling fetch()
</p>
<p class="description">
    <b>del</b> settings used when calling del()
</p>
<p class="description">
    <b>reset</b> settings used when calling reset()
</p>
<br>
<p class="description">
    Here are the settings you can set for each call type :<br>
</p>
<p class="description">
    <b>url</b> default pattern is "/javascript/coremvc/model/[modelName]/[callType].json" but you can override it using this setting.
</p>
<p class="description">
    <b>uriParams</b> name of a condition or an attribute of the object that replaces a var in the url pattern. For example: "/path/to/{0}/{1}" with uriParams = ['test', 'foo'] will replace {0} by cond.test or attr.test and {1} with cond.foo or attr.foo.
</p>
<p class="description">
    <b>methods</b> "GET" or "POST" (by default : fetch is set to "GET", save and del are set to “POST”).
</p>
<p class="description">
    <b>params</b> a javascript object listing all URI parameters and their value.
</p>
<p class="description">
    <b>parser</b> if the response of a fetch call doesn’t fit the standard JSON Format, you have to define this function. It takes the following arguments: the ajax response (resp), an empty object (col) and the request conditions (cond). You must then fill the col object using a key/value structure. The key must be unique and the value is an object similar to the attr object of the model (same attribute names).
</p>

<p class="subtitle">Methods</p>

<p class="description">
    All models created via core.model.register inherit a set of methods that allow access to the underlying collection.
    default methods (implemented in core)
</p>

<p class="description">
    <b>get(attrName)</b> get the value of an attribute
</p>
<p class="description">
    <b>getAll()</b> get all attributes and their values<br>
</p>
<p class="description">
    <b>set(attrName, value)</b> set an attribute with a value<br>
</p>
<p class="description">
    <b>update(attributes)</b> update a collection attributes with values listed in the passed object<br>
</p>
<p class="description">
    <b>revert()</b> revert data to the last saved state. Automatically called when a save call fails.<br>
</p>
<p class="description">
    <b>save()</b> save the object to a remote endpoint<br>
</p>
<p class="description">
    <b>remove()</b> remove the object locally and from the server.<br>
</p>

<p class="subtitle">reserved methods (optional; implementation provided by developer)</p>

<p class="description">
    <b>init()</b> called when an object is constructed
</p>
<p class="description">
    <b>validate()</b> called before data is saved
</p>